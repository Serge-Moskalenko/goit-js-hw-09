{"mappings":"siBAKA,MAAMA,EAAQC,SAASC,cAAc,QAErC,IAAIC,EAAW,EACXC,EAAa,KACbC,EAAW,KAEfL,EAAOM,iBAAiB,UAExB,SAAuBC,GAGrB,OAFAA,EAAEC,iBAEK,IAAIC,SAAQ,CAACC,EAASC,KAE3B,GAAIN,EAAY,OAChBA,GAAW,EAEX,IAAIO,EAAQC,OAAON,EAAEO,OAAOC,SAASH,MAAMI,OAE3CZ,EAAaa,aAAY,KAEvBd,GAAY,EAEUe,KAAKC,SAAW,GAGrCT,EAAQU,EAAAC,GAASC,OAAOC,QAAQ,uBAAqBpB,QAAiBS,QAEpED,EAAKS,EAAAC,GAASC,OAAOE,QAAQ,sBAAoBrB,QAAiBS,QAGnEA,GAAOC,OAAON,EAAEO,OAAOC,SAASU,KAAKT,OAEnCb,IAAaU,OAAON,EAAEO,OAAOC,SAASW,OAAOV,QAE/CW,cAAcvB,KAGfQ","sources":["src/js/03-promises.js"],"sourcesContent":["import \"flatpickr/dist/flatpickr.min.css\";\n\nimport Notiflix from 'notiflix'\n\n\nconst formEl= document.querySelector('form');\n\nlet position = 0;\nlet intervalId = null;\nlet isActive = null;\n\nformEl.addEventListener('submit', createPromise);\n\nfunction createPromise(e) {\n  e.preventDefault();\n\n  return new Promise((resolve, reject) => {\n\n    if (isActive) { return };\n    isActive = true;\n    \n    let delay = Number(e.target.elements.delay.value)\n  \n    intervalId = setInterval(() => {\n    \n      position += 1;\n    \n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n       resolve(Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      } else {\n       reject(Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n      };\n\n      delay += Number(e.target.elements.step.value);\n\n      if (position === Number(e.target.elements.amount.value)) {\n\n        clearInterval(intervalId);\n      };\n\n    }, delay);\n  })\n};\n\n// const refs = {\n//   formEl: document.querySelector('form'),\n//   inputAmount: document.querySelector('[name=\"amount\"]'),\n//   delayEl: document.querySelector('[name=\"delay\"]'),\n//   stepEl: document.querySelector('[name=\"step\"]')\n// };\n\n// let position = 0;\n// let intervalId = null;\n// let delay = null;\n// let isActive = null;\n\n// refs.formEl.addEventListener('submit', createPromise);\n\n// function createPromise(e) {\n//   e.preventDefault();\n//  console.log(e.target.elements.delay.value)\n//   const promis = new Promise((resolve, reject) => {\n\n//     if (isActive) { return };\n//     isActive = true;\n    \n//      delay = Number(refs.delayEl.value)\n  \n//     intervalId = setInterval(() => {\n//       delay += Number(refs.stepEl.value);\n//       position += 1;\n    \n//       const shouldResolve = Math.random() > 0.3;\n\n//       if (shouldResolve) {\n//         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n//       } else {\n//         Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n//       };\n\n//       if (position === Number(refs.inputAmount.value)) {\n\n//         clearInterval(intervalId);\n//       };\n\n//     }, delay);\n//   })\n// };"],"names":["$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$position","$47d4ff9957288465$var$intervalId","$47d4ff9957288465$var$isActive","addEventListener","e","preventDefault","Promise","resolve","reject","delay","Number","target","elements","value","setInterval","Math","random","$parcel$interopDefault","$eWCmQ","Notify","success","failure","step","amount","clearInterval"],"version":3,"file":"03-promises.cf190a09.js.map"}